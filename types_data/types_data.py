#
# -----   ИЗМЕНЯЕМЫЕ Типы Данных   --------------------------------------------------------------------------------------------------------------------------------------------------
# Список , Словарь , Множество , Пользовательский Класс
# List , Dict , Set , MyClass

# список = [ значение , значение ]
my_list = [1, 2.3, True, "Text"]  # -> <class 'list'>

# словарь = { ключ : значение }
my_dict = {1: "Yes", 2: "No"}  # -> <class 'dict'>

# множетсво = {значение , значение}
my_set = {1, 2.3, True, "Text"}  # -> <class 'set'>


# пользовательский класс
class MyClass:  # -> <class '__main__.MyClass'>
    a = 1
    b = 2

    def my_method():
        pass


# -----   НЕИЗМЕНЯЕМЫЕ Типы Данных   --------------------------------------------------------------------------------------------------------------------------------------------------
# Целое Число , Число с Плавающей Точкой , Строка , Логическое Значение , Кортеж , Обьект без Значения
# Int , Float , Str , Bool , Tuple , None

# целое число
my_int = 1  # -> <class 'int'>

# числа с плавающей точкой
my_float = 3.2  # -> <class 'float'>

# строка
my_str = "Text"  # -> <class 'str'>

# логическое значение
my_bool = True  # -> <class 'bool'>

# кортеж (значение нельзя изменять)
my_tuple = (1, 2.3, True, "Text")  # -> <class 'tuple'>


# NoneType возвращает функция(метод), если нет никакого значения
def my_fn():  # -> <function my_fn at 0x0000022BB8209260>
    return None


# range генерирует последовательности чисел в указаном диапазоне
# range( start , stop , step )
my_range = range(10)  # -> range(0, 10)

list(range(10))  # -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
list(range(0, 10, 2))  # -> [0, 2, 4, 6, 8]
list(range(10, 0, -1))  # -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

for number in range(10):
    pass
