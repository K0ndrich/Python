# Продвинутая Функция FILTER

# Ключ-Функция для filter() должна возвращать значение либо True либо False

# Может возвращать последователньость с другим количеством аргументов

# filter(my_function or None or Object.method, my_iterable_object)  # -> <filter object at 0x000002296FF76980>

# my_function  # -> True / False


# 1) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------


# создание ключ функции для filter()
def is_even(number: int):
    return number % 2 == 0  # -> True / False


my_numbers = [1, 4, 3, 2, 1, 6]

list(filter(is_even, my_numbers))  # -> [4, 2, 6]
type(filter(is_even, my_numbers))  # -> <class 'filter'>

# 2) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------\

my_people = [
    {"name": "Alice", "age": 25},
    {"name": "Bob", "age": 12},
    {"name": "Charlie", "age": 30},
]


# проверка на возраст
def is_adult(person: dict):
    return person["age"] > 18


list(
    filter(is_adult, my_people)
)  # -> [{'name': 'Alice', 'age': 25}, {'name': 'Charlie', 'age': 30}]


# 3) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------\


my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]


def my_function(numbers):
    return numbers > 3 and numbers < 10


filter(my_function, my_numbers)  # -> <filter object at 0x000002296FF76980>

list(filter(my_function, my_numbers))  # -> [4, 5, 6, 7, 8, 9]


# 4) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------\

# таже самая фильтрация, но без  использования функции filter()
# результат один и тотже
my_numbers = [x for x in range(0, 15) if x > 3 and x < 10]

my_numbers  # -> [4, 5, 6, 7, 8, 9]


# 5) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------\

# можно вместо нашей функции подставить функцию bool()
# возвраще только значения, которые bool превратило в True
my_numbers = [0, 1, 0, "", [], 0, "hello", 0, [3], 0, 5]

list(filter(bool, my_numbers))  # -> [1, 'hello', [3], 5]
# None тоже самое что и bool
list(filter(None, my_numbers))  # -> [1, 'hello', [3], 5]


# 6) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------\

# сортирвка слов по длине
my_words = ["hello", "retrieve", "max", "kondrich", "orange", "potato", "entire"]

# используем lambda функцию, попадают слова длина которых больше > 5
list(
    filter(lambda x: len(x) > 5, my_words)
)  # -> ['retrieve', 'kondrich', 'orange', 'potato', 'entire']


# 7) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------

# обращение к методу обьекта внутри функции filter

my_string = "34jsHAPhkasIf7a"

# возвращет только цифры
list(filter(str.isdigit, my_string))  # -> ['3', '4', '7']

# возвращает только буквы
list(
    filter(str.isalpha, my_string)
)  # -> ['j', 's', 'H', 'A', 'P', 'h', 'k', 'a', 's', 'I', 'f', 'a']

# возвращает только быквы в верхнем регистре
list(filter(str.isupper, my_string))  # -> ['H', 'A', 'P', 'I']

# возвращает только выквы в нижмем регистре
list(filter(str.islower, my_string))  # -> ['j', 's', 'h', 'k', 'a', 's', 'f', 'a']

# 8) -----   ПРИМЕР   ------------------------------------------------------------------------------------------------------------------------------

my_cities = {
    "Kiev": 300,
    "New York": 500,
    "Chicago": 700,
    "Miami": 250,
    "Los Angeles": 400,
}

# просто х хранит не значение ключа, а само название ключа  # -> Kiev
# my_cities[x] хранит само значение ключа, а не название ключа  # -> 300
list(
    filter(lambda x: my_cities[x] > 300, my_cities)
)  # -> ['New York', 'Chicago', 'Los Angeles']
