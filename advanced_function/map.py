# Продвинутая Функция MAP

# Функция MAP применяет нашу указаную функцию my_function к каждому елементу в последовательности my_iterable_object

# map(my_function or built_in_fucntion or Object.method, *my_iterable_object)  # -> map object


# 1) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------

my_numbers = [-1, 2, -3, 4, -5, -6, 7]

map(abs, my_numbers)  # -> <map object at 0x00000233EE1B5DB0>

list(map(abs, my_numbers))  # -> [1, 2, 3, 4, 5, 6, 7]


# используем генератор списков вместо функции map
# тотже результат только без функции map
my_numbers = [-1, 2, -3, 4, -5, -6, 7]

[abs(x) for x in my_numbers]  # -> [1, 2, 3, 4, 5, 6, 7]


# 2) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------

my_numbers = [1, 2, 3, 4, 5, 6, 7]


# используем свою функцию
def my_function(number):
    # возводим каждое число в степень
    return number**2


list(map(my_function, my_numbers))  # -> [1, 4, 9, 16, 25, 36, 49]


# 3) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------

my_strings = ["max", "hello", "orange", "inheritance"]
# возвращем длину каждой строки
list(map(len, my_strings))  # -> [3, 5, 6, 11]


# 4) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------

# испольузем метод обьекта str внутри функции map
my_strings = ["max", "hi", "kondrich"]

# возвращает строки в нужном регистре
list(map(str.upper, my_strings))  # -> ['MAX', 'HI', 'KONDRICH']
list(map(str.lower, my_strings))  # -> ['max', 'hi', 'kondrich']


# 5) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------

my_strings = ["max", "hi", "kondrich"]

# используем lambda функции и срезы списков
# возвращает каждую строку наоборот
list(map(lambda x: x[::-1], my_strings))  # -> ['xam', 'ih', 'hcirdnok']


# тоже самое, но не через функцию map, а через генератор списков
[x[::-1] for x in my_strings]  # -> ['xam', 'ih', 'hcirdnok']


# добавялем указаный символ к каждой строке в списке
list(map(lambda x: x + " )", my_strings))  # -> ['max )', 'hi )', 'kondrich )']


# делим каждую строку на отедльный список
list(
    map(list, my_strings)
)  # -> [['m', 'a', 'x'], ['h', 'i'], ['k', 'o', 'n', 'd', 'r', 'i', 'c', 'h']]


# сортировка каждого символа в каждой строке по алфавиту
list(
    map(sorted, my_strings)
)  # -> [['a', 'm', 'x'], ['h', 'i'], ['c', 'd', 'h', 'i', 'k', 'n', 'o', 'r']]


# 6) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------

# позволяет вводит пользователю в терминале безграниченое количество значений через пробел
# хранит наши значения в типе str
my_numbers = input().split()  # -> ['1', '2', '3', '4', '5']

# хранит уже именно сами значение в типе int
list(map(int, my_numbers))  # -> [1, 2, 3, 4, 5]
