# Итератор - обьект, который может проходиться по значениям последовательности
# Итератор реализовует методы iter() и next()

# Итерируемый Обьект - последовательность с значениями по которым пожет проходиться итератор
# Итериремый Обьект реализовует методы iter()

# range() явяеться итерируемым обьектом, а не итератором


my_list = [1, 2, 3, 4, 5]

# функция iter возвращает итератор с помощью которого можна будет проходиться преданой последовательности
my_iter = iter(my_list)

# в функцию iter можна передавать только последовательсности(перебираемые обьекты)
# iter(5)  # -> TypeError

# функция next возвращает следующий елемент последовательности, которая находиться внутри итератора
next(my_iter)  # -> 1

next(my_iter)  # -> 2
next(my_iter)  # -> 3
next(my_iter)  # -> 4
next(my_iter)  # -> 5

# когда елементы последователньости заканчиваються, тогда возвращаеться ошибка
# next(my_iter)  # -> StopIteration


# -----   Проверка Являеться Ли Обеькт Итератором   -------------------------------------------------------------------------------------------------------------------

my_numbers = [1, 2, 3, 4, 5]

my_iter = iter(my_numbers)

# проверяем есть ли указаный метод __next__ в нашем итераторе my_iter
# print("__next__" in dir(my_iter))  # -> True


# -----   Класс Который Поддерживает Протокол Итератора   -------------------------------------------------------------------------------------------------------------------


class Counter:
    current: int

    def __init__(self):
        self.current = 0

    # метод возвращает итератор
    def __iter__(self):
        return self

    # метод возвращает следущее значение в итерируемом обьекте
    def __next__(self):
        current = self.current
        self.current += 1
        return current


my_object = Counter()

for i in my_object:
    if i > 5:
        break
    i  # -> 0 , 1 , 2 , 3 , 4 , 5
