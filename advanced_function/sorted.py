# Продвинутая Функция Sorted


my_list = [5, 2, 3, 1, 4]


# сортировка елементов в полседовательности от меньшего к большему
sorted(my_list)  # -> [1, 2, 3, 4, 5]

# сортировка елементов в полседовательности от большего к меньшему
sorted(my_list, reverse=True)  # -> [5, 4, 3, 2, 1]


# 1) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------
my_words = ["123", "12", "1234", "123456", "123"]


def sort_by_len(my_string: str):

    return len(my_string)


# сортировка последовательности по указаной функции sort_by_len
# сортировка по длине строки от меньшего к большему
sorted_words = sorted(
    my_words, key=sort_by_len
)  # -> ['12', '123', '123', '1234', '123456']


# 2) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------


my_people = [
    {"name": "Alice", "age": 25},
    {"name": "Bob", "age": 20},
    {"name": "Charlie", "age": 30},
]


def sort_by_age(my_person: dict):

    return my_person["age"]


# сортировка людей по возрасту от меньшего к большему
a = sorted(
    my_people, key=sort_by_age
)  # -> [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 25}, {'name': 'Charlie', 'age': 30}]


# 3) -----   ПРИМЕР   ----------------------------------------------------------------------------------------------------------------------------------------------------------

my_people = [
    {"name": "Alice", "age": 25},
    {"name": "Bob", "age": 20},
    {"name": "Angeline", "age": 20},
]


def sort_by_age_name(my_person: dict):

    return my_person["age"], my_person["name"]


# сортировка людей по возрасту от меньшего к большему
# если возрвст отдинаковый, тогда сортируем по имени по алфавиту
a = sorted(
    my_people, key=sort_by_age
)  # -> [{'name': 'Bob', 'age': 20}, {'name': 'Angeline', 'age': 20}, {'name': 'Alice', 'age': 25}]
